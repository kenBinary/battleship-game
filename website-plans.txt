*isolate every bit of application functionality from the actual DOM manipulation bits

*ship factory function
-only have to test your object’s public interface
-Ships should have a hit() function that increases the number of ‘hits’ in your ship.
-isSunk() should be a function that calculates it based on their length and the number of ‘hits’.

*Gameboard factory
-Gameboards should be able to place ships at specific coordinates by calling the ship factory function.
-Gameboards should have a receiveAttack function that takes a pair of coordinates, determines whether 
or not the attack hit a ship and then sends the ‘hit’ function to the correct ship, or records the 
coordinates of the missed shot.
-Gameboards should keep track of missed attacks so they can display them properly.
-Gameboards should be able to report whether or not all of their ships have been sunk.

*Player
-Players can take turns playing the game by attacking the enemy Gameboard.
-make the ‘computer’ capable of making random plays
-it should know whether or not a given move is legal. (i.e. it shouldn’t shoot the same coordinate twice).

*main game loop and a module for DOM interaction
-game loop should set up a new game by creating Players and Gameboards. For now just populate each 
Gameboard with predetermined coordinates. You can implement a system for allowing players to 
place their ships later.
-game loop should step through the game turn by turn using only methods from other objects. 
If at any point you are tempted to write a new function inside the game loop, step back 
and figure out which class or module that function should belong to.
-Create conditions so that the game ends once one players ships have all been sunk. 
This function is appropriate for the Game module


*finishes
-try drag and drop